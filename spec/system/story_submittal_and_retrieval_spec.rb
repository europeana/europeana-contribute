# frozen_string_literal: true

# These tests make use of the whole stack including redis through sidekiq.
# In order to properly adapt/inspect jobs/data queued/generated by sidekiq,
# 'sidekiq/testing' and 'sidekiq/api' need to be included.
require 'sidekiq/testing'
require 'sidekiq/api'

RSpec.describe 'story submittal and retrieval', sidekiq: true do
  it 'takes a submission and generates thumbnails', type: :system, js: true do
    existing_aggregation = ORE::Aggregation.last

    visit new_migration_url

    fill_in('Your name', with: 'Tester One')
    fill_in('Public display name', with: 'Tester Public')
    fill_in('Your email address', with: 'tester@europeana.eu')
    fill_in('Give your story a title', with: 'Test Story')
    fill_in('Tell or describe your story', with: 'Test test test.')
    attach_file('Object 1', Rails.root + 'spec/support/media/image.jpg')

    # TODO: fix the JS errors here, so JS error checking doesn't have to be disabled
    page.driver.browser.js_errors = false

    find('input[name="commit"]').click
    expect(page).to have_content('Thank you for sharing your story!')

    # Find the submission
    aggregation = ORE::Aggregation.last

    # Make sure it's a newly created aggregation.
    expect(aggregation).to_not eq(existing_aggregation)

    # Check the CHO attributes.
    aggregatedCHO = aggregation.edm_aggregatedCHO
    expect(aggregatedCHO.dc_title).to include('Test Story')
    expect(aggregatedCHO.dc_description).to include('Test test test.')
    expect(aggregatedCHO.edm_type).to eq('IMAGE')

    # Ensure all thumbnailJobs have been picked up
    timeout = 20
    queue = Sidekiq::Queue.new('thumbnails')
    while queue.size.nonzero?
      sleep 1
      timeout -= 1
      fail('Waited too long to process thumbnail jobs.') if timeout.zero?
    end

    webresource = aggregation.edm_isShownBy

    # Check for thumbnails
    [200, 400].each do |dimension|
      thumb_sym = "thumb_#{dimension}x#{dimension}".to_sym
      thumbnail_url =  webresource.media.url(thumb_sym)

      # Ensure thumbnail is retrievable over http.
      timeout = 20
      response = nil
      while response&.status != 200
        sleep 1
        timeout -= 1
        response = Faraday.get(thumbnail_url)
        fail("Waited too long before thumbnail was http accessible. #{thumbnail_url}") if timeout.zero?
      end
      expect(response['content-type']).to eq('image/jpeg')

      # Check image attributes using MiniMagick
      img = MiniMagick::Image.open(thumbnail_url)
      expect(img.mime_type).to eq('image/jpeg')
      expect(img.dimensions).to eq([dimension, dimension])
    end
  end
end